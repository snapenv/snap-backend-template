{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#snap-faststream-template","title":"Snap FastStream Template","text":"<p>Snap template for FastStream workers server.</p>"},{"location":"#using","title":"Using","text":"<p>To serve this app, run:</p> <pre><code>docker compose up app\n</code></pre> <p>and open localhost:8000 in your browser.</p> <p>Within the Dev Container this is equivalent to:</p> <pre><code>poe api\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"Prerequisites 1. Set up Git to use SSH  1. [Generate an SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key) and [add the SSH key to your GitHub account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account). 1. Configure SSH to automatically load your SSH keys:     <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.ssh/config\n\nHost *\n  AddKeysToAgent yes\n  IgnoreUnknown UseKeychain\n  UseKeychain yes\n  ForwardAgent yes\nEOF\n</code></pre> 2. Install Docker  1. [Install Docker Desktop](https://www.docker.com/get-started).     - _Linux only_:         - Export your user's user id and group id so that [files created in the Dev Container are owned by your user](https://github.com/moby/moby/issues/3206):             <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.bashrc\n\nexport UID=$(id --user)\nexport GID=$(id --group)\nEOF\n</code></pre> 3. Install VS Code or PyCharm  1. [Install VS Code](https://code.visualstudio.com/) and [VS Code's Dev Containers extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers). Alternatively, install [PyCharm](https://www.jetbrains.com/pycharm/download/). 2. _Optional:_ install a [Nerd Font](https://www.nerdfonts.com/font-downloads) such as [FiraCode Nerd Font](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode) and [configure VS Code](https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions) or [configure PyCharm](https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions) to use it.   Development environments  The following development environments are supported:  1. \u2b50\ufe0f _GitHub Codespaces_: click on _Code_ and select _Create codespace_ to start a Dev Container with [GitHub Codespaces](https://github.com/features/codespaces). 1. \u2b50\ufe0f _Dev Container (with container volume)_: click on [Open in Dev Containers](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/snapenv/snap-faststream-template) to clone this repository in a container volume and create a Dev Container with VS Code. 1. _Dev Container_: clone this repository, open it with VS Code, and run Ctrl/\u2318 + \u21e7 + P \u2192 _Dev Containers: Reopen in Container_. 1. _PyCharm_: clone this repository, open it with PyCharm, and [configure Docker Compose as a remote interpreter](https://www.jetbrains.com/help/pycharm/using-docker-compose-as-a-remote-interpreter.html#docker-compose-remote) with the `dev` service. 1. _Terminal_: clone this repository, open it with your terminal, and run `docker compose up --detach dev` to start a Dev Container in the background, and then run `docker compose exec dev zsh` to open a shell prompt in the Dev Container.   Developing  - This project follows the [Conventional Commits](https://www.conventionalcommits.org/) standard to automate [Semantic Versioning](https://semver.org/) and [Keep A Changelog](https://keepachangelog.com/) with [Commitizen](https://github.com/commitizen-tools/commitizen). - Run `poe` from within the development environment to print a list of [Poe the Poet](https://github.com/nat-n/poethepoet) tasks available to run on this project. - Run `poetry add {package}` from within the development environment to install a run time dependency and add it to `pyproject.toml` and `poetry.lock`. Add `--group test` or `--group dev` to install a CI or development dependency, respectively. - Run `poetry update` from within the development environment to upgrade all dependencies to the latest versions allowed by `pyproject.toml`. - Run `cz bump` to bump the app's version, update the `CHANGELOG.md`, and create a git tag."},{"location":"MODULES-Reference/snap_core/","title":"Index","text":"<p>Snap Core.</p>"},{"location":"MODULES-Reference/snap_core/config/","title":"Index","text":"<p>Snap Core Config.</p>"},{"location":"MODULES-Reference/snap_core/config/manager/","title":"Manager","text":"<p>SnapEnv settings.</p>"},{"location":"MODULES-Reference/snap_core/config/manager/#src.snap_core.config.manager.SnapEnvCommonSettings","title":"<code>SnapEnvCommonSettings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>SnapEnv common configuration parameters shared between all environments.</p> <p>Read configuration parameters defined in this class, and from ENVIRONMENT variables and from the .env file.</p> <p>The source priority is changed (from default) to the following order (from highest to lowest):   - env_settings   - dotenv_settings   - init_settings   - file_secret_settings</p> <p>The following environment variables should already be defined:   - HOSTNAME (on Linux servers only - set by OS)   - COMPUTERNAME (on Windows servers only - set by OS)   - ENVIRONMENT (on all servers)</p> <p>Path where your .env file should be placed:   - linux: /home//.local   - darwin: /home//.local   - win32: C:\\Users\\\\AppData\\Roaming\\Python' <p>Path where your secret files should be placed:   - linux: /home//.local/secrets   - darwin: /home//.local/secrets   - win32: C:\\Users\\\\AppData\\Roaming\\Python\\secrets' Source code in <code>src/snap_core/config/manager.py</code> <pre><code>class SnapEnvCommonSettings(BaseSettings):\n    r\"\"\"SnapEnv common configuration parameters shared between all environments.\n\n    Read configuration parameters defined in this class, and from\n    ENVIRONMENT variables and from the .env file.\n\n    The source priority is changed (from default) to the following\n    order (from highest to lowest):\n      - env_settings\n      - dotenv_settings\n      - init_settings\n      - file_secret_settings\n\n    The following environment variables should already be defined:\n      - HOSTNAME (on Linux servers only - set by OS)\n      - COMPUTERNAME (on Windows servers only - set by OS)\n      - ENVIRONMENT (on all servers)\n\n    Path where your &lt;environment&gt;.env file should be placed:\n      - linux: /home/&lt;user&gt;/.local\n      - darwin: /home/&lt;user&gt;/.local\n      - win32: C:\\\\Users\\\\&lt;user&gt;\\\\AppData\\\\Roaming\\\\Python'\n\n    Path where your secret files should be placed:\n      - linux: /home/&lt;user&gt;/.local/secrets\n      - darwin: /home/&lt;user&gt;/.local/secrets\n      - win32: C:\\\\Users\\\\&lt;user&gt;\\\\AppData\\\\Roaming\\\\Python\\\\secrets'\n    \"\"\"\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        secrets_dir=SECRETS_DIR,\n        env_file_encoding=\"utf-8\",\n        env_file=\".env\",\n    )\n\n    # constant parameters.\n\n    # Environment depending parameters.\n    env: str = ENVIRONMENT\n    platform: str = PLATFORM.get(sys.platform, \"other\")\n\n    @computed_field  # type: ignore[misc]\n    @property\n    def server(self) -&gt; str:\n        \"\"\"Return local server name stripped of possible domain part.\n\n        :return: Server name in upper case.\n        \"\"\"\n        return platform.node()\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n        \"\"\"Change source priority order (env trumps environment).\"\"\"\n        return (env_settings, dotenv_settings, init_settings, file_secret_settings)\n</code></pre>"},{"location":"MODULES-Reference/snap_core/config/manager/#src.snap_core.config.manager.SnapEnvCommonSettings.server","title":"<code>server: str</code>  <code>property</code>","text":"<p>Return local server name stripped of possible domain part.</p> <p>:return: Server name in upper case.</p>"},{"location":"MODULES-Reference/snap_core/config/manager/#src.snap_core.config.manager.SnapEnvCommonSettings.settings_customise_sources","title":"<code>settings_customise_sources(settings_cls, init_settings, env_settings, dotenv_settings, file_secret_settings)</code>  <code>classmethod</code>","text":"<p>Change source priority order (env trumps environment).</p> Source code in <code>src/snap_core/config/manager.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]:\n    \"\"\"Change source priority order (env trumps environment).\"\"\"\n    return (env_settings, dotenv_settings, init_settings, file_secret_settings)\n</code></pre>"},{"location":"MODULES-Reference/snap_faststream_template/","title":"Index","text":"<p>Snap FastStream Template.</p>"},{"location":"MODULES-Reference/snap_faststream_template/api/","title":"Api","text":"<p>Snap FastStream Template REST API.</p>"},{"location":"MODULES-Reference/snap_faststream_template/api/#src.snap_faststream_template.api.compute","title":"<code>compute(n=42)</code>  <code>async</code>","text":"<p>Compute the result of a CPU-bound function.</p> RETURNS DESCRIPTION <code>    int: fibonacci result</code> Source code in <code>src/snap_faststream_template/api.py</code> <pre><code>@app.get(\"/compute\")\nasync def compute(n: int = 42) -&gt; int:\n    \"\"\"Compute the result of a CPU-bound function.\n\n    Returns\n    -------\n        int: fibonacci result\n    \"\"\"\n\n    def fibonacci(n: int) -&gt; int:\n        return n if n &lt;= 1 else fibonacci(n - 1) + fibonacci(n - 2)\n\n    result = await asyncio.to_thread(fibonacci, n)\n    return result\n</code></pre>"},{"location":"MODULES-Reference/snap_faststream_template/api/#src.snap_faststream_template.api.lifespan","title":"<code>lifespan(app)</code>  <code>async</code>","text":"<p>Handle FastAPI startup and shutdown events.</p> Source code in <code>src/snap_faststream_template/api.py</code> <pre><code>@asynccontextmanager\nasync def lifespan(app: FastAPI) -&gt; AsyncGenerator[None, None]:\n    \"\"\"Handle FastAPI startup and shutdown events.\"\"\"\n    # Startup events:\n    # - Remove all handlers associated with the root logger object.\n    for handler in logging.root.handlers:\n        logging.root.removeHandler(handler)\n    # - Add coloredlogs' colored StreamHandler to the root logger.\n    coloredlogs.install()\n    yield\n</code></pre>"},{"location":"MODULES-Reference/snap_faststream_template/core/","title":"Index","text":"<p>Snap FastStream Template Core.</p>"},{"location":"MODULES-Reference/snap_faststream_template/core/config/","title":"Index","text":"<p>Snap FastStream Template core config.</p>"},{"location":"MODULES-Reference/snap_faststream_template/core/config/settings/","title":"Settings","text":"<p>Snap FastStream Template settings.</p>"},{"location":"MODULES-Reference/snap_faststream_template/core/config/settings/#src.snap_faststream_template.core.config.settings.AppSettings","title":"<code>AppSettings</code>","text":"<p>               Bases: <code>SnapEnvCommonSettings</code></p> <p>AppSettings app configuration parameters..</p> <p>Values from {ENVIRONMENT}.env supersede previous values when the file exists.</p> <p>Args     SnapEnvCommonSettings (type): Configura\u00e7\u00e3o do APP.</p> Source code in <code>src/snap_faststream_template/core/config/settings.py</code> <pre><code>class AppSettings(SnapEnvCommonSettings):\n    \"\"\"AppSettings app configuration parameters..\n\n    Values from {ENVIRONMENT}.env supersede previous values when the file exists.\n\n    Args\n        SnapEnvCommonSettings (_type_): Configura\u00e7\u00e3o do APP.\n    \"\"\"\n\n    # Debug\n    LOG_LEVEL: str\n\n    model_config = SettingsConfigDict(env_file=f\"{SnapEnvCommonSettings().env}.env\")\n</code></pre>"},{"location":"MODULES-Reference/snap_faststream_template/core/config/settings/#src.snap_faststream_template.core.config.settings.get_settings","title":"<code>get_settings()</code>  <code>cached</code>","text":"<p>get_settings summary.</p> RETURNS DESCRIPTION <code>    AppSettings: _description_</code> Source code in <code>src/snap_faststream_template/core/config/settings.py</code> <pre><code>@lru_cache\ndef get_settings() -&gt; AppSettings:\n    \"\"\"get_settings _summary_.\n\n    Returns\n    -------\n        AppSettings: _description_\n    \"\"\"\n    return AppSettings()\n</code></pre>"},{"location":"adr/0001-record-architecture-decisions/","title":"Use Markdown Any Decision Records V3","text":""},{"location":"adr/0001-record-architecture-decisions/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We want to record any decisions made in this project independent whether decisions concern the architecture (\"architectural decision record\"), the code, or other fields. Which format and structure should these records follow?</p>"},{"location":"adr/0001-record-architecture-decisions/#considered-options","title":"Considered Options","text":"<ul> <li>MADR 3.0.0 \u2013 The Markdown Any Decision Records</li> <li>Michael Nygard's template \u2013 The first incarnation of the term \"ADR\"</li> <li>Other templates listed at https://schubmat.github.io/DecisionCapture</li> <li>Formless \u2013 No conventions for file format and structure</li> </ul>"},{"location":"adr/0001-record-architecture-decisions/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR 3.0.0\", because</p> <ul> <li>Implicit assumptions should be made explicit.   Design documentation is important to enable people understanding the decisions later on.   See also A rational design process: How and why to fake it.</li> <li>MADR allows for structured capturing of any decision.</li> <li>The MADR format is lean and fits our development style.</li> <li>The MADR structure is comprehensible and facilitates usage &amp; maintenance.</li> <li>The MADR project is vivid.</li> </ul>"},{"location":"adr/adr-template/","title":"Adr template","text":""},{"location":"adr/adr-template/#source-httpsgithubcomadrmadrblob300templateadr-templatemd","title":"source: https://github.com/adr/madr/blob/3.0.0/template/adr-template.md","text":""},{"location":"adr/adr-template/#these-are-optional-elements-feel-free-to-remove-any-of-them","title":"These are optional elements. Feel free to remove any of them.","text":"<p>status: {proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005} date: {YYYY-MM-DD when the decision was last updated} deciders: {list everyone involved in the decision} consulted: {list everyone whose opinions are sought (typically subject-matter experts); and with whom there is a two-way communication} informed: {list everyone who is kept up-to-date on progress; and with whom there is a one-way communication}</p>"},{"location":"adr/adr-template/#short-title-of-solved-problem-and-solution","title":"{short title of solved problem and solution}","text":""},{"location":"adr/adr-template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story.  You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"adr/adr-template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"adr/adr-template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"adr/adr-template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adr/adr-template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"adr/adr-template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or  document the team agreement on the decision and/or  define when this decision when and how the decision should be realized and if/when it should be re-visited and/or  how the decision is validated.  Links to other decisions and resources might here appear as well.}</p>"},{"location":"adr/summary/","title":"ADR Summary","text":"ID Date Decision Status 1 03-02-2024 Use Markdown Any Decision Records V3 Accepted"}]}